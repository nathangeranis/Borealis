@inherits LayoutComponentBase
@inject ILogger<MainLayout> Logger
<MudThemeProvider @bind-IsDarkMode="@Global.IsDarkMode" Theme="_theme.Theme" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Color="Color.Primary" Dense="true" Elevation="2">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="DrawerToggle" />
        <MudSpacer />
        <MudText Typo="Typo.h5" Align="Align.Center" Inline="true" Color="Color.Surface" Class="white-header-text">Borealis</MudText>
        <MudSpacer />
        @*<MudText Typo="Typo.caption" Align="Align.End" Inline="true" Color="Color.Surface" Class="white-header-text">@(BreakpointProvider.Breakpoint.ToString())</MudText>*@
        <MudToggleIconButton ToggledChanged="SetDarkMode" Edge="Edge.End"
                             Icon="@Icons.Material.Filled.Brightness7" Color="@Color.Warning" Title="Light Mode"
                             ToggledIcon="@Icons.Material.Filled.Bedtime" ToggledColor="@Color.Surface" ToggledTitle="Dark Mode" Variant="Variant.Text" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="_theme.DrawerElevation" ClipMode="_theme.DrawerClipMode" Variant="@DrawerVariant.Mini" OpenMiniOnHover="true" MiniWidth="3.25rem" Style="overflow-x: clip;">
        <MudSwipeArea OnSwipe="@OnSwipe" Style="width:11rem;">
            <NavMenu></NavMenu>
        </MudSwipeArea>
    </MudDrawer>
    <MudMainContent>
        <MudContainer Fixed="true">
            <CascadingValue Value="ReloadTheme">
                @Body
            </CascadingValue>
        </MudContainer>
    </MudMainContent>
</MudLayout>
@code {
    [Inject]
    CosmosRepository<ThemeOptions> Repo { get; set; }
    ThemeOptions _theme;
    bool _drawerOpen = false;
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    public void OnSwipe(SwipeDirection direction)
    {
        if (direction == SwipeDirection.LeftToRight && !_drawerOpen)
        {
            _drawerOpen = true;
            StateHasChanged();
        }
        else if (direction == SwipeDirection.RightToLeft && _drawerOpen)
        {
            _drawerOpen = false;
            StateHasChanged();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var gOpts = await Global.GetThemeOptions();
            if (gOpts.Theme == null)
            {
                _theme = await ThemeUtility.LoadTheme(Repo);
            }
            else
                _theme = gOpts;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, ex.Message);
        }
        await base.OnInitializedAsync();
    }
    public async void ReloadTheme()
    {
        _theme = await Global.GetThemeOptions();
        StateHasChanged();
    }
    public async void SetDarkMode()
    {
        Global.IsDarkMode = !Global.IsDarkMode;
        StateHasChanged();
    }
}